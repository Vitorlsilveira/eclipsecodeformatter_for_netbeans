package org.netbeans.eclipse.formatter.options;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.prefs.Preferences;
import javax.swing.JCheckBox;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.EditorKit;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.modules.editor.indent.api.IndentUtils;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.text.CloneableEditorSupport;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

public class EclipseFormatterPanel extends javax.swing.JPanel {

    enum Foo{
        DISABLED_GLOBAL,
        USE_ECLIPSE_GLOBAL,
        DISABLED_LOCAL,
        USE_ECLIPSE_LOCAL_GLOBALOVERRIDE,
    }
    
    private EclipseFormatterOptionsPanelController controller;
    private final Project project;

    public EclipseFormatterPanel(final EclipseFormatterOptionsPanelController controller, Project p) {
        this.controller = controller;
        this.project = p;
        initComponents();
        enableUI();
        
        EditorKit kit = CloneableEditorSupport.getEditorKit("text/xml");
        previewPane.setEditorKit(kit);
        
        formatterLocField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                controller.changed();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                controller.changed();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                controller.changed();
            }
        });
        rbUseEclipse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    enableUI();
                    controller.changed();
            }
        });
        rbUseNetBeans.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    enableUI();
                    controller.changed();
            }
        });
        formatterLocField.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    setConfigFileAndUpdatePreviewPane(formatterLocField.getText());
                    controller.changed();
                }
            });
        cbShowNotifications.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.changed();
            }
        });
        
    }

    public JTextField getFormatterLocField() {
        return formatterLocField;
    }
    
    public JRadioButton getEnabledCheckbox() {
        return rbUseEclipse;
    }
    
    public JRadioButton getNetBeansCheckbox() {
        return rbUseNetBeans;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        formatterLocField = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        previewPane = new javax.swing.JEditorPane();
        cbShowNotifications = new javax.swing.JCheckBox();
        rbUseNetBeans = new javax.swing.JRadioButton();
        rbUseEclipse = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.jLabel1.text")); // NOI18N

        formatterLocField.setText(org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.formatterLocField.text")); // NOI18N

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.errorLabel.text")); // NOI18N
        errorLabel.setToolTipText(org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.errorLabel.toolTipText")); // NOI18N

        previewPane.setEditable(false);
        previewPane.setFocusable(false);
        previewPane.setHighlighter(null
        );
        jScrollPane2.setViewportView(previewPane);

        org.openide.awt.Mnemonics.setLocalizedText(cbShowNotifications, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.cbShowNotifications.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatterLocField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addGap(7, 7, 7))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbShowNotifications)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(formatterLocField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowNotifications)
                .addGap(8, 8, 8))
        );

        buttonGroup1.add(rbUseNetBeans);
        org.openide.awt.Mnemonics.setLocalizedText(rbUseNetBeans, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.rbUseNetBeans.text")); // NOI18N

        buttonGroup1.add(rbUseEclipse);
        org.openide.awt.Mnemonics.setLocalizedText(rbUseEclipse, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.rbUseEclipse.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(EclipseFormatterPanel.class, "EclipseFormatterPanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbUseEclipse)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbUseNetBeans)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rbUseNetBeans)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbUseEclipse)
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        //The default dir to use if no value is stored
        File home = new File(System.getProperty("user.home"));
        final FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Eclipse formatter (*.xml)", "xml");
        //Now build a file chooser and invoke the dialog in one line of code
        //"user-dir" is our unique key
        File toAdd = new FileChooserBuilder("user-dir").setFilesOnly(true).setTitle("Choose Eclipse formatter file ...").
        setDefaultWorkingDirectory(home).setApproveText("Choose").
        addFileFilter(fileNameExtensionFilter).setFileFilter(fileNameExtensionFilter).
        showOpenDialog();
        //Result will be null if the user clicked cancel or closed the dialog w/o OK
        if (toAdd != null) {
            setConfigFileAndUpdatePreviewPane( toAdd.getAbsolutePath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void setConfigFileAndUpdatePreviewPane(String absolutePath) {
        if (absolutePath.equals(formatterLocField.getText())){
            //already set
            return;
        }
        formatterLocField.setText(absolutePath);
        try {
            previewPane.setText(FileUtil.toFileObject(FileUtil.normalizeFile(new File(absolutePath))).asText());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    void load() {
        String globalEclipseFormatterLocation = NbPreferences.forModule(EclipseFormatterPanel.class).get("globalEclipseFormatterLocation", NO__ECLIPSE_FORMATTER_DEFINED);
        boolean isGlobalEclipseFormatterEnabled = NbPreferences.forModule(EclipseFormatterPanel.class).getBoolean("isGlobalEclipseFormatterEnabled", false);
        if (project != null) {
            loadProjectOptionsUI(isGlobalEclipseFormatterEnabled, globalEclipseFormatterLocation);
        } else {
            loadOptionsWindowUI(isGlobalEclipseFormatterEnabled, globalEclipseFormatterLocation);
        }
    }

    private void loadProjectOptionsUI(boolean isGlobalEclipseFormatterEnabled, String globalEclipseFormatterLocation) {
        final File globalNormalizedFile = FileUtil.normalizeFile(new File(globalEclipseFormatterLocation));

        Preferences projectPrefs = ProjectUtils.getPreferences(project, IndentUtils.class, true);
        final boolean isLocalEclipseFormatterEnabled = projectPrefs.getBoolean("isLocalEclipseFormatterEnabled", false);
        final boolean isLocalNetBeansFormatterEnabled = projectPrefs.getBoolean("isLocalNetBeansFormatterEnabled", false);
        
        String localEclipseFormatteLocation;
        if (isGlobalEclipseFormatterEnabled && !isLocalEclipseFormatterEnabled) {
            localEclipseFormatteLocation = globalEclipseFormatterLocation;
        }else{
            localEclipseFormatteLocation = projectPrefs.get("localEclipseFormatterLocation", NO__ECLIPSE_FORMATTER_DEFINED);
        }
        formatterLocField.setText(localEclipseFormatteLocation);
        rbUseNetBeans.setSelected(isLocalNetBeansFormatterEnabled);
        if (rbUseNetBeans.isSelected()) {
            rbUseEclipse.setSelected(false);
        } else {
            rbUseEclipse.setSelected(isLocalEclipseFormatterEnabled);
        }
        if (!localEclipseFormatteLocation.equals(NO__ECLIPSE_FORMATTER_DEFINED)) {
            final File localFile = FileUtil.normalizeFile(new File(localEclipseFormatteLocation));
            if (localFile.exists()) {
                try {
                    previewPane.setText(FileUtil.toFileObject(localFile).asText());
                    formatterLocField.setText(localEclipseFormatteLocation);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        } else if (!globalEclipseFormatterLocation.equals(NO__ECLIPSE_FORMATTER_DEFINED)) {
            if (globalNormalizedFile.exists()) {
                try {
                    previewPane.setText(FileUtil.toFileObject(globalNormalizedFile).asText());
                    formatterLocField.setText(globalEclipseFormatterLocation);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        rbUseEclipse.setText("Override global Eclipse formatter");
        enableUI();
    }
    private static final String NO__ECLIPSE_FORMATTER_DEFINED = "<no Eclipse formatter defined>";

    private void loadOptionsWindowUI(boolean isGlobalEclipseFormatterEnabled, String globalEclipseFormatterLocation) {
        //If no Project in context, i.e., in Options window:
        if (isGlobalEclipseFormatterEnabled) {
            final File globalNormalizedFile = FileUtil.normalizeFile(new File(globalEclipseFormatterLocation));        
            if (globalNormalizedFile.exists()) {
                try {
                    previewPane.setText(FileUtil.toFileObject(globalNormalizedFile).asText());
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        formatterLocField.setText(globalEclipseFormatterLocation);
        if (isGlobalEclipseFormatterEnabled) {
            buttonGroup1.setSelected(rbUseEclipse.getModel(), true);
        }else{
            buttonGroup1.setSelected(rbUseNetBeans.getModel(), true);
        }
        enableUI();
    }

    void store() {
        NbPreferences.forModule(EclipseFormatterPanel.class).put("globalEclipseFormatterLocation", formatterLocField.getText());
        NbPreferences.forModule(EclipseFormatterPanel.class).putBoolean("isGlobalEclipseFormatterEnabled", rbUseEclipse.isSelected());
        NbPreferences.forModule(EclipseFormatterPanel.class).putBoolean("globalEclipseFormatterDebug", cbShowNotifications.isSelected());
    }

    boolean valid() {
        errorLabel.setText("");
        if (rbUseEclipse.isSelected()) {
            final String fileName = formatterLocField.getText();
            final File file = new File(fileName);
            if (file.exists() && file.getName().endsWith("xml")) {
                return true;
            } else {
                errorLabel.setText("OK button disabled until the Eclipse formatter is defined or disabled!");
                return false;
            }
        } 
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbShowNotifications;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField formatterLocField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JEditorPane previewPane;
    private javax.swing.JRadioButton rbUseEclipse;
    private javax.swing.JRadioButton rbUseNetBeans;
    // End of variables declaration//GEN-END:variables

    private void enableUI() {
        final boolean isEnabled = rbUseEclipse.isSelected();
        jLabel1.setEnabled(isEnabled);
        jLabel2.setEnabled(isEnabled);
        browseButton.setEnabled(isEnabled);
        formatterLocField.setEnabled(isEnabled);
        previewPane.setEnabled(isEnabled);
        cbShowNotifications.setEnabled(isEnabled);
    }

}
